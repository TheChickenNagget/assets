function encode(r,e){if(!r)throw new Error("No Text to encode was provided");if(" "===r)throw new Error("Text cannot be empty string");"number"==typeof r&&(r=r.toString());try{return(t=r,t.replace(/[\s\S]/g,r=>(r=function(r){return"00000000".slice(String(r).length)+r}(r.charCodeAt().toString(2)),!0===e?`${r} `:`${r}`))).toString()}catch(r){throw new Error(`Error ${r.stack}`)}var t}function decode(r){if(!r)throw new Error("No Text to decode was provided");if(" "===r)throw new Error("Text cannot be empty string");"number"==typeof r&&(r=r.toString());try{return(e=r,(e=(e=e.replace(/\s+/g,"")).match(/.{1,8}/g).join(" ")).split(" ").map(function(r){return String.fromCharCode(parseInt(r,2))}).join("")).toString()}catch(r){if("Cannot read property 'join' of null"===r.message)throw new Error("Text to decode cannot be empty string");throw new Error(r.stack)}var e}function auto(r,e){if(!r){if(!r)throw new Error("No Text to decode / encode was provided");if(" "===r)throw new Error("Text cannot be empty string")}if("number"==typeof r)throw new Error("please add ' ' tags to the binary numbers, for example: test.decode('000101101') instead of the: test.decode(000101101)");if(/^[01][01\s]*[01]$/.test(r))try{return(o=r,(o=(o=o.replace(/\s+/g,"")).match(/.{1,8}/g).join(" ")).split(" ").map(function(r){return String.fromCharCode(parseInt(r,2))}).join("")).toString()}catch(r){if("Cannot read property 'join' of null"===r.message)throw new Error("Text to decode cannot be empty string");throw new Error(r.stack)}else{if(!r)throw new Error("No Text to encode was provided");if(" "===r)throw new Error("Text cannot be empty string");if("number"==typeof r)throw new Error("Text to encode must be string instead of the number, for example use encode('4') instead of the encode(4)");try{return(t=r,t.replace(/[\s\S]/g,r=>(r=function(r){return"00000000".slice(String(r).length)+r}(r.charCodeAt().toString(2)),!0===e?`${r} `:`${r}`))).toString()}catch(r){throw new Error(`Error ${r.stack}`)}}var t,o}
